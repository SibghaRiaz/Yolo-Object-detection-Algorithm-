# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PsZekka5XXx1VXQZ9evfbWNVJF_JeHNy

## Assignment 05 (Holidays Assignment)
## Sibgha Riaz (319090)
### Yolo Object Detection Algorithm
This algorithm applies a single neural network to the full image, and then divides the image into regions and predicts bounding boxes and probabilities for each region.
"""

#Import the Libraries
import cv2
import numpy as np 
import argparse
import time
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow

# Load Yolo
## use the pre-trained model weights
net = cv2.dnn.readNet("/content/yolov3.weights", "/content/yolov3.cfg.txt")

classes = []
with open("/content/coco.names.txt", "r") as f:
     classes = [line.strip() for line in f.readlines()]
layer_names = net.getLayerNames()
output_layers = [layer_names[i[0] - 1] for i in net.getUnconnectedOutLayers()]
colors = np.random.uniform(0, 255, size=(len(classes), 3))

# Loading image

img = cv2.imread("/content/Image.JPG")
plt.imshow(img)
height, width, channels = img.shape
height
width
channels

# Detecting objects
blob = cv2.dnn.blobFromImage(img, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
net.setInput(blob)
outs = net.forward(output_layers)

# Showing informations on the screen
class_ids = []
confidences = []
boxes = []
for out in outs:
    for detection in out:
        scores = detection[5:]
        class_id = np.argmax(scores)
        confidence = scores[class_id]
        if confidence > 0.5:
           # Object detected
            center_x = int(detection[0] * width)
            center_y = int(detection[1] * height)
            w = int(detection[2] * width)
            h = int(detection[3] * height)
            # Rectangle coordinates
            x = int(center_x - w / 2)
            y = int(center_y - h / 2)
            boxes.append([x, y, w, h])
            confidences.append(float(confidence))
            class_ids.append(class_id)
indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)
print(indexes)
font = cv2.FONT_HERSHEY_PLAIN
for i in range(len(boxes)):
    if i in indexes:
       
       
       
       
       
        x, y, w, h = boxes[i]
        label = str(classes[class_ids[i]])
        color = colors[i]
        cv2.rectangle(img, (x, y), (x + w, y + h), color, 2)
        cv2.putText(img, label, (x+5, y + 15), font, 1.5, color, 1)
cv2.imwrite("/content/Image.JPG", img)
cv2_imshow(img)
cv2.waitKey(0)
cv2.destroyAllWindows()